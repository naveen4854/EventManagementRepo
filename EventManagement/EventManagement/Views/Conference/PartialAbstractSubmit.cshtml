@model EventManagement.DataModels.AbstractSubmitDTO

@using (Html.BeginForm(null, null, FormMethod.Post, new { @id = "modalAbstractSubmitform", encType = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal" style="padding:20px">
        <div class="col-12">
            <div class="col-md-11"><h2>Submit Abstract</h2></div>
            <div class="col-md-1 pointer">
                <i class="fa fa-window-close" id="modalClose" aria-hidden="true"></i>
            </div>
        </div>
        @Html.HiddenFor(model => model.ConferenceId, new { Value = @ViewData["ConferenceId"] })
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div>
            <div class="col-12">
                <hr />
                <div class="form-group">
                    <div class="col-md-offset-1 col-md-10">
                        @Html.DropDownList("Title", new SelectList(@ViewBag.Titles, "Id", "Name"), new { @class = "form-control" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-1 col-md-10">
                        @Html.EditorFor(model => model.SubmittedBy, new { htmlAttributes = new { @class = "form-control", @placeholder = @Html.DisplayNameFor(m => m.SubmittedBy) } })
                        @Html.ValidationMessageFor(model => model.SubmittedBy, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-1 col-md-10">
                        @Html.EditorFor(model => model.EmailId, new { htmlAttributes = new { @class = "form-control", @placeholder = @Html.DisplayNameFor(m => m.EmailId) } })
                        @Html.ValidationMessageFor(model => model.EmailId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-1 col-md-10">
                        @Html.EditorFor(model => model.Organisation, new { htmlAttributes = new { @class = "form-control", @placeholder = @Html.DisplayNameFor(m => m.Organisation) } })
                        @Html.ValidationMessageFor(model => model.Organisation, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-1 col-md-10">
                        @Html.EditorFor(model => model.Telephone, new { htmlAttributes = new { @class = "form-control", @placeholder = @Html.DisplayNameFor(m => m.Telephone) } })
                        @Html.ValidationMessageFor(model => model.Telephone, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-1 col-md-10">
                        @Html.DropDownListFor(model => model.Country, new SelectList(@ViewBag.Countries, "Id", "Name"), "Select Country", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-1 col-md-10">
                        @Html.DropDownListFor(model => model.Track, new SelectList(@ViewBag.Tracks, "Id", "Name", @ViewBag.Track), "Select Scientific Sessions", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Track, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-1 col-md-10">
                        @Html.DropDownListFor(model => model.Category, new SelectList(@ViewBag.Categories, "Id", "Name"), "Select Interested In", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Category, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.DocUpload, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-7">
                        @Html.TextBoxFor(m => m.DocUpload, new { type = "file", @class = "btn btn-default btn-file" })
                        @Html.ValidationMessageFor(model => model.DocUpload, "", new { @class = "text-danger" })
                        @*<input type="file" id="upFiles" class="btn" />*@
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-12 txtctr">
                        <input type="button" value="Submit" class="push-btn" onclick="postAbstract()" />
                    </div>

                </div>
            </div>
        </div>
    </div>
}
<script>
    function postAbstract() {
        if($('#modalAbstractSubmitform').valid()){
            var data = new FormData();
            var files = $("#upFiles").prop("files");
            data.append("DocUpload", files[0]);

            data.append("conferenceId", @ViewData["ConferenceId"]);
            data.append("title", $("#Title").val());
            data.append("submittedBy", $("#SubmittedBy").val());
            data.append("emailId", $("#EmailId").val());
            data.append("telephone", $("#Telephone").val());
            data.append("organisation", $("#Organisation").val());
            data.append("country", $("#Country").val());
            data.append("track", $("#Track").val());
            data.append("category", $("#Category").val());

            var url = "@Url.Content("~/Conference/SubmitAbstract")";

            $.ajax({
                type: 'POST',
                contentType: false,
                processData: false,
                url: url,
                data: data,
                success: function (response) {
                    window.location.href = response.Url;
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    toastr.info('Something went wrong!!')
                },
            });
        }
    }

    $.validator.unobtrusive.adapters.add('filesize', ['maxsize'], function (options) {
        options.rules['filesize'] = options.params;
        if (options.message) {
            options.messages['filesize'] = options.message;
        }
    });
    $.validator.addMethod('filesize', function (value, element, params) {
        if (element.files.length < 1) {
            // No files selected
            return true;
        }

        if (!element.files || !element.files[0].size) {
            // This browser doesn't support the HTML5 API
            return true;
        }

        return element.files[0].size <= params.maxsize;
    }, '');
    $.validator.unobtrusive.adapters.add('filetype', ['validtypes'], function (options) {
        options.rules['filetype'] = { validtypes: options.params.validtypes.split(',') };
        options.messages['filetype'] = options.message;
    });

    $.validator.addMethod("filetype", function (value, element, param) {
        for (var i = 0; i < element.files.length; i++) {
            var extension = getFileExtension(element.files[0].name);
            if ($.inArray(extension, param.validtypes) === -1) {
                return false;
            }
        }
        return true;
    });
    $.validator.unobtrusive.parse("#modalAbstractSubmitform");

    $('#modalClose').click(function () {
        $('.modal').modal('hide');
    });
</script>

